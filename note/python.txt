===============================================================================
-*- pip -*-
-------------------------------------------------------------------------------
*. install at user site
    pip install --user <package_name>
*. prevent pip install to real system
    export PIP_REQUIRE_VIRTUALENV=true

-------------------------------------------------------------------------------
-*- uwsgi -*-
-------------------------------------------------------------------------------
*. install
    pip install --user uwsgi

    sudo apt-get install uwsgi uwsgi-plugin-python3
    sudo vi /etc/uwsgi/apps-avaliable/site.ini
    sudo ln -s /etc/uwsgi/apps-avaliable/site.ini
               /etc/uwsgi/apps-enabled/site.ini

*. nginx
    server {
        listen 80;
        server_name localhost;
    
        location / { 
            uwsgi_pass unix:/var/run/uwsgi/app/site/socket;
            include uwsgi_params;
        }   
    } 

*. django
    [uwsgi]
    harakiri = 20
    max-requests = 5000
    vacuum = true
    chdir = <proj_dir>
    wsgi-file = <proj_name>/wsgi.py
    virtualenv = <env_path>
    
*. server
    --http <ip>:<port>
    --socket <unix_socket_path>
    --wsgi-file <file>
*. concurrency
    --worker <num>
    --proccesses <num>
    --threads <num>

-------------------------------------------------------------------------------
-*- virualenv -*-
-------------------------------------------------------------------------------
*. install
    sudo apt-get install python-virtualenv
*. create
    virtualenv -p python3 <env>

-------------------------------------------------------------------------------
-*- django -*-
-------------------------------------------------------------------------------
*. create
    django-admin.py startproject <proj>
    manage.py migrate

===============================================================================


===============================================================================
*. Python does *not* do 'Copy On Write'.
*. For sequences, (strings, lists, tuples),
   use the fact that empty sequences are false.
===============================================================================
-*- Data Model -*-
-------------------------------------------------------------------------------
*. for immutable types, operations that compute new values may actually return
   a reference to any existing object with the same type and value, while
   for mutable objects this is not allowed.
*. Standard type hierarchy
    <> class 'NoneType'
        This Type has a single value 'None'.Its truth value is false.
    <> class 'NotImplementedType'
        This Type has a single value 'NotImplemented'.Its truth value is true.
    <> class 'ellipsis'
        This Type has a single value '...'('Ellipsis').Its truth value is true.
    <> number.Number
         number.Integral
           int
           bool
         number.Real
           float
         number.Complex
===============================================================================
-*- old-style classes and new-style classes -*-
-------------------------------------------------------------------------------
*. if x is an instance of an old-style class, then x.__class__ designates the 
   class of x, but type(x) is always <type instance'>. This reflects the fact
   that all old-style instances, independently of their class, are implemented
   with a single built-in type, called instance.
*. A new-style class neither more nor less than a user-defined type. If x is
   an instance of a new-style class, then type(x) is same as x.__class__
*. New-style classes inherit from object, or from another new-style class.
    class NewStyleClass(object):
        pass
    class AnotherNewStyleClass(NewStyleClass):
        pass
   Old-style classes don't
    class OldStyleClass():
        pass
*. New-style classes were introduced in Python2.2 to unify classes and types.
*. The major motivation for introducing new-style classes is to provide a
   unified object model with a full meta-model.
*. For compatibility reasons, classes are still old-style by default.
*. Python3 only has a new-style classes.
===============================================================================
-*- Installing Python Modules -*-
-------------------------------------------------------------------------------
* python setup.py install
* python setup.py build
    --build-base=<build_dir>
* install path
    Unix(pure)     <prefix>/lib/pythonX.Y/site-packages
    Unix(non-pure) <exec-preifx>/lib/pythonX.Y/site-packages
    Windows        <prefix>/lib/site-packages
===============================================================================
-*- Compiled Python files -*-
-------------------------------------------------------------------------------
*. Python can now be prevented from writing .pyc or .pyo files by supplying
   the -B switch to the Python interpreter, or by Setting the
   PYTHONDONTWRITEBYTECODE environment variable before running the interpreter.
   This setting is available to Python programs as the sys.dont_write_bytecode
   variable, and Python code can change the value to modify the interpreter's
   behaviour.
*. A program doesn't run any faster when it is read from a .pyc or .pyo file
   than when it is read from a .py file; the only thing that's faster about
   .pyc or .pyo files is the speed with wich they are loaded.
*. When a script is run by giving its name on the command line, the bytecode
   for the script is never written to a .pyc or .pyo file.
*. It is possible to have a .pyc or .pyo file without a .py file for the same
   module. This can be used to distribute a library of Python code in a form
   that is moderately hard to reverse engineer.
===============================================================================
-*- Envvar -*-
-------------------------------------------------------------------------------
PYTHONPATH               module search path
PYTHONSTARTUP            .profile for python interactive mode
PYTHONDONTWRITEBYTECODE  don't write byte code

PYTHONUSERBASE           defines the user base directory
===============================================================================
-*- Number -*-
-------------------------------------------------------------------------------
*. integer division (//)
*. Complex: (real + imagj) or complex(real, imag)
===============================================================================
-*- Boolean -*-
-------------------------------------------------------------------------------
*. any non-zero integer value is true; zero is false;
*. any sequence; anything with a non-zero length is true,
   empty sequences are false.
===============================================================================
-*- String -*-
-------------------------------------------------------------------------------
*. Can be enclosed in single quotes or double quotes
*. String literals can span multiple lines in several ways.
   (1)Continuation lines can be used, with a backslash as the last character on
      the line indicating that the next line is a logical continuation of the
      line.
   (2)Strings can be surrounded in a pair of matching triple-quotes: """ or '''
      You can also use \ in triple-quotes to avoid an unwanted initial blank
      line.
   (3)Make the string literal a "raw" string (begin with r).
*. Strings can be concatenated with + operator, and repeat by * operator
   Two String literals next to each other are automatically concatenated.
*. Strings can be inedexed by [].
*. Substrings can be specified with the slice noation [a:b]
   omitted 'a' defaults to 0.
   omitted 'b' defaults to the size of the string being sliced.
*. Python strings cannot be changed. Assigning to an indexed position in the
   string results in an error.
*. s[:i] + s[i:] equals s
*. an index that is too large is replaced by the string size
   an upper bound smaller than the lower bound returns an empty string.
   Indices may be negative numbers, to start counting from the right.
*. Python has ways to convert any value to a string: pass it to the repr() or
   str() functions.

*. String.encode('encoding_name');
===============================================================================
-*- List -*-
-------------------------------------------------------------------------------
list.append(x)
    list[len(list):] = [x]

list.extend(L)
    list[len(list):] = L

list.insert(i, x)

list.remove(x)
    it is an error if there is no such item.

list.pop([i])

list.index(x)
    return the index in the list of the first item whose value is x.
    it is an error if there is no such item.

list.count(x)

list.sort()

list.reverse()

*. List items need not all have the same type.
*. Unlike strings, which are immutable, it is possible to change individual
   elements of a list
*. Assignment to slices is also possible, and this can even change the size
   of the list or clear it entirely
*. List Comprehensions
*. del statement
*. insert, remove or sort that modify the list return None.
   This is a design principle for all mutable data structures in Python.
*. Empty List : []
===============================================================================
-*- Tuple -*-
-------------------------------------------------------------------------------
*. on output tuples are always enclosed in paranthees, so that nested tuples
   are interpreted correctly; they may be with or without surrounding
   parentheses, although often parentheses are necessary anyway.
*. It is not possible to assign to the individual items of a tuple,
   however it is possible to create tuples which contain mutable objects,
   such as lists.
*. Tuples are immutable, lists are mutable.
*. tuple packing
       t = x, y, z
   sequence unpakcing
       x, y, z = t
*. Empty Tuple : ()
===============================================================================
-*- Set -*-
-------------------------------------------------------------------------------
*. A set is an unordered collection with no duplicate elements.
*. Basic uses
    <> membership testing.
    <> eliminating duplicate entires.
*. set comprehension. 
*. Empty Set : set()
===============================================================================
-*- Dictionary -*-
-------------------------------------------------------------------------------
*. Dictionaries are indexed by keys, which can be any immutable type;
   Strings are numbers can always be keys, Tuples can be used as keys if
   they contain only strings, numbers, or tuples; if a tuple contains
   any mutable object either directly or indirectly, it cannot be used
   as a key.
*. It is an error to extract a value using a non-existent key.
*. The dict() constructor builds dictionaries directly from sequences of 
   key-value pairs. When the keys are simple strings, it is sometimes
   easier to specify pairs using keyword arguments.
*. dict comprehensions
*. Empty Dictionary: {}
===============================================================================
-*- Operator / Expression -*-
-------------------------------------------------------------------------------
*. Multiple assignment
    is realy just a combination of tuple packing and sequence unpacking.
*. <var> in <sequence>
   <var> not in <sequence>
    <> The comparison operators "in" and "not in" check whether a value occurs
       (does not occur) in a sequence.
*. Comparisons can be chained, a < b == c
*. not/and/or
*. and/or short-circuit
*. unlike C, assignment cannot occur inside expressions. It avoids a common
   class of problems encountered in C, type = in an expression when == was
   intended.
===============================================================================
-*- Control Flow -*-
-------------------------------------------------------------------------------
*. if Statements
if condition1:
    ...
elif condition2:
    ...
elif condition3:
    ...
else:
    ...

*. for Statements
for var in range():
    ...

for var in sequences:
    ...
else
    ...

    <> it is not safe to modify the sequence being iterated over in the loop.
       If you need to modify the list you are iterating over, you must iterate
       over a copy.
    <> Loop statesments may have an else clause; it is executed when the loop
       terminates through exhaustion of the list (with for) or when the
       condition becomes false (with while), but not when the loop is
       terminated by a break statement.

*. pass Statements
    <> The pass statement does nothing. It can be used when a statement is
       required syntactically but the program requires no action.

*. Looping Techniques
    <> When looping through dictionaries, the key and corresponding value 
       can be retrieved at the same time using the items() method.

       for k, v in dic.items():
           ...

    <> When looping through a sequence, the position index and corresponding
       value can be retrieved at the same time using the enumerate() function

       for i, v in enumerate(list):
           ...

    <> When loop over two or more sequences at the same time, the entries can
       be paired with the zip() funtion.

       for u, v in zip(l1, l2):
           ...

       for v1, v2, ..., vn in zip(l1, l2, ..., ln):
           ...
    <> To loop over a sequence in reverse, first specify the sequence in a
       forward direction and then call the reversed() function

       for i in reversed(seq):
           ...

    <> To loop over a sequence in sorted order, use the sorted() function
       which returns a new sorted list while leaving the souce unaltered.

       for i in sorted(seq):
           ...

       for i in sorted(set(seq)):
           ...

===============================================================================
-*- Functions -*-
-------------------------------------------------------------------------------
def funcName(params):
    ...

__doc__  docstring

*. The first statement of the function body can optinally be a string literal;
   this string iteral is the function's documentation string, or docstring
*. The execution of a function introduces a new symbol table used for the local
   variables of the function. More precisely, all variable assignments in a
   function store the value in the local symbol table.
*. variable references first look in the local symbol table,
   then in the local symbol tables of enclosing functions,
   then in the global symbol tables
   and finally in the table of built-in names.
*. Global variables cannot be directly assigned a value within a function
   (unless named in a global statement), although they may be referenced.
*. The actual parameters to a function call are introduced in the local symbol
   table of the called function when it is called;
*. arguments are passed using call by value (where the value is always an
   object referencte, not the value of the object)
*. A function definition introduces the function name in the current symbol
   table.
*. Even functions without a return statement do return a value, "None"
*. Default Argument Value
    <> The default value is evaluated only once. This makes a difference when
       the default is a mutable object such as a list, dictionary, or instances
       of most classed
*. Keyword Argument
    def func(formal, parameter, *arguments, **keywords)

    <> When a final formal parameter of the form **name is present, it receives
       a dictionary containing all keyword arguments except for those
       corresponding to a formal parameter list.
    <> *name which receives a tuple containing the positional arguments beyond
       the formal parameter list (*name must occur before **name)
    <> Any formal parameters which occur after *name parameter are
       'keyword-only' arguments,
*. Unpacking Argument Lists
  '*' operator unpack the arguments out of a list or tuple.
  '**' operator unpack the keyword arguments out of a dictionary.
===============================================================================
-*- Lambda Forms -*-
-------------------------------------------------------------------------------
===============================================================================
-*- Classes -*-
-------------------------------------------------------------------------------
*. Class definitions, like function definitions (def statements) must be
   executed before they have any effect. You could conceivably place a class
   definition in a branch of an if statement, or inside a function.
*. In practice, the statements inside a class definition will usually be
   function definitions, but other statements are allowed, and sometimes
   useful.
*. When a class definition is entered, a new namespace is created, and used
   as the local scope -- thus, all assignments to local variable go into
   this new namespace.
*. When a class definition is left normally (via the end), a class object is
   created. This is basically a wrapper around the contents of the namespace
   created by the class definition.
*. Each value is an object, and therefore has a class (also called its type)
   It is stored as object.__class__
*. Class Objects
    <> Classes partake of the dynamic nature of Python, they are created at
       runtime, and can be modified further after creation.
    <> Class object support two kinds of operations: attribute reference and
       instantiation.
*. Method
    <> In Python, the term method is not unique to class instances, other
       object type can have methods as well.
    <> Like in C++, most built-in operators with special syntax can be
       redefined for class instances.
    <> __init__() method
    <> Often, the first argument of a method is called self. This is nothing
       more than a convention. the name self has absolutely no special
       meaning to Python.
    <> It is not necessary that the function definition is textually enclosed
       in the class definition, assigning a function object to a local
       variable in the class is also ok.
    <> Methods may call other methods by using method attributes of the self
       argument
*. Method Objects
    <> a method object is created by packing (pointers to) the instance
       object and the function object just found together in a abstract
       object
       x = MyClass();
       x.f is not the same thing as MyClass.f
       -- it is a method object, not a function object.
*. Data attributes
    <> Data attributes override method attributes with the same name
    <> Data attributes may be references by methods as well as by ordinary
       users of an object. In other words, classes are not usable to
       implement pure abstarct data types, In fact, nothing in Python makes
       it possible to enforce data hiding -- it is all based upon convention
    <> There is no shorthand for referencing data attributes from within
       methods.  This actually increases the readability of methods, there
       is no chance of confusing local variables and instance variables
       when glancing through a method.
*. Inheritance
    <> Unlike C++, built-in types can be used as base classes for extension
       by the user.
    <> class DerivedClassName(BaseClassName):
           ....
        [] In place of a base class name, other arbitrary expressions are also
           allowed.
    <> class DerivedClassName(Base1, Base2, Base3):
           ....
        [] For most purposes, you can think of the search for attributes
           inherited from a parent class as depth-first, left-to-right, not
           searching twice in the same class where these is an overlap in the 
           heirarchy. Thus, if an attribute is not found in DerivedClassName,
           it is searched for in Base1, then (recursively) in the base classes
           of Base1, and if it was not found there, it war searched for in
           Base2, and so on
    <> two built-in functions that work with inheritance
        [] isinstance(obj, class)
        [] issubclass(subclass, baseclass)
*. Private Variables
    <> A name prefixed with an underscore should be treated as a non-public
       of the API. It should be considered an implementation detail and
       subject to change without notice.
    <> Any identifier of the form __spam (at least two leading underscores,
       at most one trailing underscore) is textually replaced with
       _classname__spam, where classname is the current class name with
       leading underscores stripped
===============================================================================
-*- Scopes and Namespaces -*-
-------------------------------------------------------------------------------
*. A namespace is a mapping from names to objects. Most namespaces are
   currently implemented as Python dictionaries.
*  A attribute is for any name following a dot.
*. Namespaces are created at different moments and have different lifetimes.
    <> The namespace containing the built-in names is created when the Python
       interpreter starts up, and is never deleted.
    <> The global namespace for a mudule is created when the module definition
       is read in; normally, module namespaces also last until the interpreter
       quits.
    <> The statements executed by the top-level invocation of the interpreter,
       either read from a script file or interactively, are considered part
       of a module called __main__, The built-in names actually also live in
       a module, this is called builtins
    <> The local namespace for a function is created when the function is
       called, and deleted when the function returns or raises an exception
       that is not handled.
*. A scope is a textual region of a Python program where a namespace is
   directly accessible
    <> the innermost scope, which is searched first, contains the local names
       the scopes of any enclosing functions, which are searched starting
       with the nearest enclosing scope, contains non-local, but also
       non-global names
       the next-to-last scope contains the current module's global names
       the outermost scope (searched last) is the namespace containing
       built-in names.
    <> The global statement can be used to indicate that particular variables
       live in the global scope and should be rebound there;
       The nonlocal statement indicateds that particular variables live in
       an enclosing scope and should be rebound there
===============================================================================
-*- Modules -*-
-------------------------------------------------------------------------------
*. A module can contain executable statments as well as function definitions.
   These statements are intended to initialize the module. They are executed
   only the first time the module is imported somewhere.
*. Each modules has its own private symbol table. Thus, the author of a mudule
   can use global variables in the module without worrying about accidental
   clashed with a user's global variables.
*. from <module> import <name>
    This does not introduce the module name from which the imports are taken
    in the local symbol table.
*. from <module> import *
    This imports all names except those beginning with an underscore(_)
*. For efficiency reasons, each module is only imported once per interpreter
   session. use imp.reload() to relead the module
   import imp; imp.reaload(modulename)
*. Module Search Path
    <> built-in module with that name.
    <> a list of directories given by the variable sys.path
        [] the directory containing the input script
        [] env variable PYTHONPATH
        [] the installation-dependent default
*. dir(builtins)
===============================================================================
-*- Packages -*-
-------------------------------------------------------------------------------
*. Packages are a way of structuring Python's module namespace by using "dotted
   module names".
*. When importing the package, Python searches through the directories on
   sys.path looking for the package subdirectory.
*. The __init__.py files are required to make Python treat the directories as
   containing packages. In the simplest case, __init__.py can just be an empty
   file, but it can also execute initialization code for the package or
   set the __all__ variable.
*. if a package's __init__.py code defines a list named __all__, it is taken
   to be the list of module names that should be imported when
   from <package> import * is encountered.
*. There is nothing wrong with using 
    from <package> import <specific_submodule>
   In fact, this the recommended notation unless the importing module needs
   to use submodules with the same name from different packages.
*. Intra-package References:
    <> Relative imports: use leading dots to indicate the current and parent
       packages involved in the relative import.
    <> the relative imports are based on the name of the current module.
       Since the name of the main module is always "__main__", modules intended
       for use as the main module of a Python application must always use
       absolute imports.
===============================================================================
-*- Input and Output -*-
-------------------------------------------------------------------------------
*. Reading and Writing Files
    <> open(filename, mode)
    <> f.read(size)
       f.readline()
       f.readlines()
       for line in f:
           ....
         # This is memory efficient, fast and leads to simpler code:
         # Since the two approaches manage line buffering differently,
         # they should not be mixed.
    <> f.tell()
         # returns an integer giving the file objects' current position
         # in the file
       f.seek(offset, from_what)
         # from_what 0 -> the beginnig of the file
         #           1 -> the current file position
         #           2 -> the end of the file
         [] In text files, only seeks relative to the beginning of the file
            are allowed (the exception being seeking to the very file end
            with seek(0, 2))
    <> f.close()
===============================================================================
-*- Errors and Exceptions
-------------------------------------------------------------------------------
*. 
    try:
        ...
    except <exceptionType>:
        ...
        raise
    except <exceptionType> as instance:
        ...
    else:
        ...
    finally:
        ...

    try:
        ...
    except (<exceptionType1>, <exceptionType2> ...)
        ...

    <> A try statement may have more than one exception clause, at most
       one handler will be executed.
    <> The last except clause may omit the exception name(s), to serve as a
       wildcard. Use this with extreme caution, since it is easy to mask
       a real programming error in this way. It can also be used to print
       an error message and then re-raise the exception
    <> The try ... except statement has an optional esle clause, It is useful
       for code that must be executed if the try clause does not raise
       an exception
    <> The except clause may specify a variable after the exception name.
       The variable is bound to an exception insstance with the arguments
       stored in instance.args
    <> The raise statement allows the programmer to force a specified exception
       to occur.
    <> The sole argument to raise indicates the exception to be raised.
       This must be either an exception instance or an exception class
       (a class that derives from Exception)
    <> Exception classes can be defined which do anything any other class can
       do, but are usually kept simple, often only offering a number of
       atrributes that allow information about the error to be extracted by
       handlers for the exception.
    <> When creating a module that can raise several distinct errors,
       a common practice is to create a base class for exceptions defined
       by that module, and subclass that to create specific exception
       classes for different error conditions.
    <> Most exceptions are defined with names that end in "Error",
       similar to the naming of the standard exceptions.
    <> The try statement has another optional clause which is intended to
       define clean-up actions that must be executed under all circumstances.
       A finally clause is always executed before leaving the try statement,
       whether an exception has occurred or not.i When an exception has
       occurred in the try clause and has not been handled by an except
       caluse it is re-raised after the finally clause has been executed.
       The finally clause is also executed "on the way out" when any other
       clause of the try statement is left via a break, continue or return
       statement.
    <> with statement -- predefined clean-up actions

*. exceptions must derive from BaseException
   catching classes that do not inherit from BaseException is not allowed

*. ValueError
   EOFError
   KeyboardInterrupt
===============================================================================
-*- Iterators -*-
-------------------------------------------------------------------------------
*. __iter__()
   __next__()
   StopIteration Exception
    <> The for statement calls iter() on the container object. The function
       returns an iterator object that defines the method __next__() which
       accessed elements in container one at a time. when there are on more
       elements, __next__() raises a StopIteration exception which tells the
       for loop to exterminate.
===============================================================================
-*- Generators -*-
-------------------------------------------------------------------------------
*. Generators are a simple and powerful tool for creating iterators. They
   are written like regular functions but use the yield statement whenever
   they want to return data. Each time next() is called on it, the generator
   resumes where it left-off. (it remembers all the data values and which
   statement was last executed).
*. When generator terminate, they automatically raise StopIteration.
===============================================================================
-*- Standard Library -*-
-------------------------------------------------------------------------------
*. import os
*. import shutil
*. import glob
*. import sys
*. import re
*. import math
*. import random
*. import urllib
*. import smtplib
*. import datetime
*. import zlib
*. import timeit
*. import profile
*. import pstats
===============================================================================
-*- Built-in Types
-------------------------------------------------------------------------------
*. Binary Sequence Types (bytes, bytearray, memoryview)
    <> bytes
        [] Bytes objects are immutable sequencs of single bytes.
        [] The syntax for bytes literals is largely the same as that for string
           literals, except that a b prefix is added, Only ASCII characters
           are permitted in bytes literals, regardless of the declared source
           code encoding. Any binary values over 127 must be entered into
           bytes literals using the appropriate escape sequence. As with string
           literals, bytes literals may also use a r prefix to disable
           processing of escape sequences.
    <> bytearray
        [] bytearray objects are a mutable couterpart to byte objects.
        [] There is no dedicated literal syntax for bytearray objects,
           instead they are always created by calling the constructor.
    <> memoryview
           
===============================================================================
PEP3132 Extended Iterable Unpacking
===============================================================================


