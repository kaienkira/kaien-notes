===============================================================================
fifo(first in, first out; named pipe)
===============================================================================
*. create
    mkfifo(pathname, mode)
    mkfifoat(dirfd, pathname, mode)
*. open
    open(pathname, O_RDONLY)
    open(pathname, O_WRONLY)
    [] The FIFO must be opened on both ends (reading and writing)
       before data can be passed
    [] Opening a FIFO for reading normally blocks until some other process
       opens the same FIFO for writing, and vice versa
*. read
    read(fd, buff, buff_size);
    [] If no process has the pipe open for writing,
       read() will return 0 to indicate end-of-file
    [] If some process has the pipe open for writing
       and O_NONBLOCK is set, read() will return -1 and set errno to [EAGAIN]
    [] If some process has the pipe open for writing and O_NONBLOCK is clear,
       read() will block the calling thread until some data is written or
       the pipe is closed by all processes that had the pipe open for writing
===============================================================================
