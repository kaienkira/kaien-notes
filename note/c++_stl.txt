===============================================================================
-*- #include <type_traits> -*-
===============================================================================
*. std::remove_cv
   std::remove_const
   std::remove_volatile
   std::remove_cv_t
   std::remove_const_t
   std::remove_volatile_t
    ---------------------------------------------------------------------------
    template <class T>
    struct remove_cv { typedef T type; };
    template <class T>
    struct remove_cv<const T> { typedef T type; };
    template <class T>
    struct remove_cv<volatile T> { typedef T type; };
    template <class T>
    struct remove_cv<const volatile T> { typedef T type; };
    template <class T>
    struct remove_const { typedef T type; };
    template <class T>
    struct remove_const<const T> { typedef T type; };
    template <class T>
    struct remove_volatile { typedef T type; };
    template <class T>
    struct remove_volatile<volatile T> { typedef T type; };

    template< class T >
    using remove_cv_t = typename remove_cv<T>::type;
    template< class T >
    using remove_const_t = typename remove_const<T>::type;
    template< class T >
    using remove_volatile_t = typename remove_volatile<T>::type;
    ---------------------------------------------------------------------------
    std::remove_cv_t<const int> a = 1;
    a = 2;
-------------------------------------------------------------------------------
*. std::integral_constant
   std::true_type
   std::false_type
    ---------------------------------------------------------------------------
    template <class T, T v>
    struct std::integral_constant {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; }
    };

    using std::true_type = std::integral_constant<bool, true>;
    using std::false_type = std::integral_constant<bool, false>;
    ---------------------------------------------------------------------------
    std::integral_constant<int, 4> a;
    static_assert(a.value == 4);
    static_assert(a == 4);
    static_assert(a() == 4);

    std::true_type b;
    static_assert(b.value == true);
    static_assert(b == true);
    static_assert(b() == true);
-------------------------------------------------------------------------------
*. std::is_same
   std::is_same_v
    ---------------------------------------------------------------------------
    template <class T, class U>
    struct is_same : std::false_type {};
    template <class T>
    struct is_same<T, T> : std::true_type {};

    template <class T, class U>
    inline constexpr bool is_same_v = is_same<T, U>::value;
    ---------------------------------------------------------------------------
    static_assert(std::is_same<int, bool>::value == false);
    static_assert(std::is_same<int, int32_t>::value == true);
    static_assert(std::is_same_v<int, int32_t> == true);
-------------------------------------------------------------------------------
