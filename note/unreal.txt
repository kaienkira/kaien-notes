===============================================================================
-*- Unreal Build System -*-
===============================================================================
source -> UHT(UnrealHeaderTool) -> c++ compiler

[AppName]\[AppName].Target.cs

===============================================================================
-*- Modules -*-
===============================================================================
[GameName]\Source\[ModuleName]\[ModuleName].h
[GameName]\Source\[ModuleName]\[ModuleName].cpp
[GameName]\Source\[ModuleName]\[ModuleName].Build.cs
IMPLEMENT_PRIMARY_GAME_MODULE
IMPLEMENT_GAME_MODULE

===============================================================================
-*- Classes -*-
===============================================================================
UWorld
    SpawnActor()

UObject
    PostInitProperties()
    CreateDefaultSubobject()
AActor

UActorComponent
UCameraComponent
USceneComponent

Pawn
    AutoPossessPlayer
Character
Brush

FVector
FRotator

FString
    TEXT()
FText
    LOCTEXT_NAMESPACE
    NSLOCTEXT()
    LOCTEXT()
FNAME

TArray
TMap
TSet

TEnumAsByte

EAutoReceiveInput
EObjectFlags

===============================================================================
-*- Reflection -*-
===============================================================================
UCLASS()
USTRUCT()
GENERATED_BODY()
UPROPERTY()
UFUNCTION()

===============================================================================
-*- Memory Management & Garbage collection -*-
===============================================================================
    FPlatformMemory
        FMalloc *BaseAllocator();
    FMalloc
        <>--FMallocAnsi
        <>--FMallocTBB
FMemory
    SystemMalloc() SystemFree()
    Malloc() Realloc() Free()
    Memmove() Memcmp() Memset() Memzero()
    Memcpy() BigBlockMemcpy() StreamingMemcpy()
    Memswap()

*. FUseSystemMallocForNew
    Inherit from FUseSystemMallocForNew if you want your objects to 
    be placed in memory alloced by the system malloc routines
    bypassing GMalloc

*. Any UObject pointer stored in a UPROPERTY counts as a "reference"
*. Actors are not usually garbage collected
   must manually call Destroy() on them.  They will not be deleted immediately,
   and instead will be cleaned up during the next garbage collection phase
*. When a UObject is garbage collected
   all UPROPERTY references to it will be set to nullptr
*. UStructs cannot be garbage collected
*. FGCObject::AddReferencedObjects

*. Every member of a class should be declared as a UPROPERTY
*. Member pointers should only point at UObject or UObject-derived objects
*. The garbage collector could delete the object that owns
   what a non-UObject pointer pointing at
*. The only container that is safe to
   have UObject or UObject-derived pointers in is a TArray

===============================================================================
-*- Object/Actor Iterator -*-
===============================================================================
for (TObjectIterator<UObject> It; It; ++It) {}
for (TActorIterator<AActor> It; It; ++It) {}

===============================================================================
-*- Character Movement -*-
===============================================================================
UCharacterMovementComponent
    GravityScale
===============================================================================
