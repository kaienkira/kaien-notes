================================================================================
-*- Git Objects -*-
================================================================================
Blob(hashed object)
    which are the most basic data type in Git.
    Essentially, a blob is just a bunch of bytes;
    usually a binary representation of a file.
Tree object(hashed object)
    which are a bit like directories.
    Tree objects can contain pointers to blobs and other tree objects.
Commit object(hashed object)
    which point to a single tree object and
    contain some metadata including the commit author and any parent commits.
Tag object(hashed object)
    which point to a single commit object, and contain some metadata.
Reference(file in .git/refs which contains a hash)
    which are pointers to a single object (usually a commit or tag object)
Branch(file in .git/refs/heads)
    Just a reference. When you create a new commit, Git simply changes the 
    current branch to point to the newly-created commit object.
Tag(file in .git/refs/tags)
    Lightweight tag point to a commit object.
    Annotated tag point to a tag object.
HEAD
    This is a "symbolic" reference which points to
    the tip of the current branch rather than an actual commit. 
    It is actually possible for HEAD to point directly to a commit object.
    When this happens, Git will tell you that you are in a "detached HEAD state". 

================================================================================
-*- 创建远程版本库 -*-
================================================================================
sudo useradd git -m
vi /etc/passwd
    *:/usr/bin/git-shell
git init --base
git remote add origin <url>
git remote set-url origin <url>

================================================================================
-*- 历史 -*-
================================================================================
*. 清除所有历史
    git checkout --orphan newBranch
    git add -A  # Add all files and commit them
    git commit
    git branch -D master  # Deletes the master branch
    git branch -m master  # Rename the current branch to master
    git push -f origin master

*. 列出log中的文件名
    git log --name-only

*. 列出文件历史
    git log --follow -p -- <file>

================================================================================
-*- 分支 -*-
================================================================================
*. 察看所有分支
    git branch -a
*. 查看未合并分支
    git branch --no-merged
*. 查看已合并分支
    git branch --merged
*. 获取远程分支
    git fetch
    git checkout dev

*. 建立远程分支
    git push -u(--set-upstream) origin dev
*. 删除远程分支
    git push origin :dev
    git branch --unset-upstream
*. 合并分支
    # 保留提交历史
    git merge <branch>
    # 不保留提交历史
    git merge --squash <branch>
    git cherry-pick <branch>
*. 撤销分支合并
    git reset --hard <commit_before_merge>

================================================================================
-*- 标签 -*-
================================================================================
*. 创建标签
git tag <tag>
*. 当前所在标签
git describe --tags
*. 同步远程服务器标签
git pull --tags
git pull --prune --tags
git push --tags
*. 重命名标签
git tag <new> <old>
git tag -d <old>
git push origin :refs/tags/<old>
git push --tags
*. 显示提交
git tag -n99
git show <tag>

================================================================================
-*- 冲突解决 -*-
================================================================================
*. git pull == git fetch + git merge
*. 默认情况下, 合并后的结果会自动提交, 除非使用--no-commit

# 列出冲突文件
# 当合并冲突发生时, 会用到0以上的暂存区编号
    git ls-files -s

# 察看冲突文件副本
    git show :1:<file_path> 共同祖先
    git show :2:<file_path> 本地
    git show :3:<file_path> remote

# 放弃合并
    git reset
    git checkout -- <file>

# 手工编辑, 使用my change或者their changes
    vi <file>
    git checkout --ours <file>
    git checkout --theris <file>
    git add <file>
    git commit -m "xx"
    git push

# 恢复删除的文件
    git checkout HEAD~1 -- <file>

================================================================================
-*- Submodule -*-
================================================================================
*. stored in .gitmodule, use `git submodule sync` to update .git/config
*. remove the submodule
    git submodule deinit <module>
    git rm <module>

================================================================================
-*- Config -*-
================================================================================
git config 
[--global] ~/.gitconfig
[--system] /etc/gitconfig
[-e]

git config --list --local
git config --list --global
git config --list --system

================================================================================
-*- Setup Github -*-
================================================================================
# generate ssh key
cd ~/.ssh
rm id_rsa*
ssh-keygen -t rsa -C"youremail@youremail.com"
# add ~/.ssh/id_rsa.pub to github ssh key
ssh -T git@github.com

# generate gpg key
gpg --gen-key
# export public key
gpg --armor --export <you@example.com> > <public_key_filename>
# export private key
gpg --armor --export-secret-keys <you@example.com> > <private_key_filename>
# import secret key (which contains the public key)
gpg --import <private_key_filename>
# list keys
gpg --list-keys

================================================================================
-*- Setup Gitlab -*-
================================================================================
wget https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh
sudo bash script.deb.sh
sudo apt-get install gitlab-ce
sudo gitlab-ctl reconfigure

================================================================================
-*- Proxy -*-
================================================================================
[http]
proxy=socks5://127.0.0.1:9059

vi ~/.ssh/config
Host github.com 
    ProxyCommand connect -S 127.0.0.1:9059 %h %p
    ProxyCommand nc -X 5 -x 127.0.0.1:9059 %h %p
    IdentityFile ~/.ssh/id_rsa
    TCPKeepAlive yes
    IdentitiesOnly yes

================================================================================
-*- Misc -*-
================================================================================
git show <object>

git remote -v

*file status
untracked <-> unmodified <-> modified <-> staged
    git add   <file> #add to stage area
    git reset <file> #remove from stage area

# 工作区, 暂存区diff
git diff 
# 工作区, 版本树diff
git diff HEAD

git stash
git stash list
git stash pop
================================================================================
