==============================================================================================================
-*- Resource Management -*-
==============================================================================================================
Object.Instantiate                     ->     GameObject                -> Object.Destory

AssetBundle.LoadAsset                  ->     Object,Audio,Animation,   -> Resources.UnloadAsset(obj)
AssetBundle.LoadAllAssets                     Texture,Material          -> Resources.UnloadUnusedAssets()
                                                                           AssetBundle.Unload(true)

WWW.assetBundle                        ->     AssetBundle               -> AssetBundle.Unload(false)
AssetBundle.LoadFromFile                                                   AssetBundle.Unload(true)
AssetBundle.LoadFromMemory

new WWW                                ->     WebStream
AssetBundle.LoadFromMeory

new WWW
WWW.LoadFromCacheOrDownload            ->     WWW                       -> WWW.Dispose()
                                                                           WWW = null
--------------------------------------------------------------------------------------------------------------
AssetBundle打包
--------------------------------------------------------------------------------------------------------------
(1) 清除AssetBundleName
    AssetDatabase.GetAllAssetBundleNames()
    AssetDatabase.RemoveAssetBundleName()
(2) 设置资源AssetBundleName
    var assetImporter = AssetImporter.GetAtPath(assetPath);
    assetImporter.assetBundleName = assetBundleName;
(3) 打包
    BuildPipeline.BuildAssetBundles(outputPath, assetBundleOptions, targetPlatform)
        UncompressedAssetBundle     - 不压缩
        DisableWriteTypeTree        - 不写入TypeTree
        ChunkBasedCompression       - 使用LZ4压缩
        ForceRebuildAssetBundle     - 强制重新打包
        DeterministicAssetBundle
        StrictMode
    BuildPipeline.BuildAssetBundles(outputPath, assetBundleOptions, builds, targetPlatform)
        AssetBundleBuild

--------------------------------------------------------------------------------------------------------------
AssetBundle加载
--------------------------------------------------------------------------------------------------------------
(1)
WWW(string url)
WWW.assetBundle
    能处理压缩的AssetBundle文件
    完成后会在内存中创建较大的WebStream
    后续的AssetBundle.Load直接在内存中进行
(2)
WWW.LoadFromCacheOrDownload(url, version, crc)
WWW.assetBundle
    能处理压缩的AssetBundle文件
    将解压形式的Bundle内容存入磁盘中作为缓存
    完成后只会在内存中创建较小的SerializedFile
    后续的AssetBundle.Load需要通过IO从磁盘中的缓存获取
    Caching.compressionEnabled控制磁盘缓存是否压缩(fast LZ4)
    缓存文件使用文件名(域名和路径将被忽略)和版本号唯一确定
    磁盘缓存使用LRU策略, 如果缓存用尽将在内存中操作(同方法1)
(3)
AssetBundle.LoadFromFile(path, crc, offset)
    如果assetbundle使用了压缩, 则解压到内存
    完成后只会在内存中创建较小的SerializedFile
    后续的AssetBundle.Load需要通过IO从磁盘中的缓存获取
(4)
AssetBundle.LoadFromMemory(byte[], crc)
    完成后会在内存中创建较大的WebStream
    后续的AssetBundle.Load直接在内存中进行

--------------------------------------------------------------------------------------------------------------
Shader striping
--------------------------------------------------------------------------------------------------------------
Edit->Project Settings->Graphics->ShaderStripping->Manual
    LightmapModes -> Manual

==============================================================================================================
-*- Version Control -*-
==============================================================================================================
Edit->Project Settings->Editor->Visible Meta Files
Edit->Project Settings->Editor->Asset Serialization Mode->Force Text

==============================================================================================================
-*- Resource Path -*-
==============================================================================================================
Application.dataPath            \Assets
Application.streamingAssetsPath \Assets\StreamingAssets
Application.persistentDataPath  C:\Users\<u>\AppData\LocalLow\<company>\<proj>
Application.temporaryCachePath  C:\Users\<u>\AppData\Local\Temp\<company>\<proj>

==============================================================================================================
Physics
==============================================================================================================
Any game object with a collider and a rigid body is considered dynamic.
Any game object with a collider attached
but no physics rigid body is expected to be static.

Any time we move, rotate, or scale a static collider
Unity will recalculate all the static colliders again
and update the static collider cache

==============================================================================================================
Meterials
==============================================================================================================
Standard Shader(PBS):
    Rendering Mode:
        Opaque:
            solid objects with no transparent areas
        Cutout:
            the texture is either 100% opaque or invisible
        Transparent:
            based on the texture’s alpha channel and
            the alpha of the tint colour
            DiffuseColor * Alpha + RefColor * (1 - Alpha)
        Fade:
            Allows the transparency values to entirely fade an object out,
            including any specular highlights or reflections it may have. 
            DiffuseColor * Alpha + RefColor * Alpha
    Albedo: base color of the surface
        Albedo texture should not contain any lighting
    Transparency

==============================================================================================================
Lights
==============================================================================================================
diffuse
specular

==============================================================================================================
NGUI
==============================================================================================================
UIGeometry
  ** UIWidget geometry
    verts
    uvs
    cols
    ApplyTransform()
    WriteToBuffers()

UIDrawCall : MonoBehaviour
==============================================================================================================
