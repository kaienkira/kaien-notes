#!/bin/bash
# description: tl-tun2socks
### BEGIN INIT INFO
# Provides:             tl-tun2socks
# Required-Start:       pid-cleanup
# Required-Stop:
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    tl-tun2socks
### END INIT INFO

script_name=`basename $0`
script_abs_name=`readlink -f $0`
script_path=`dirname $script_abs_name`

cfg_socks_server_addr=
cfg_gateway_ip=
cfg_tun_dev=
cfg_tun_network_prefix=
cfg_bypass_ip_list=

desc=tl-tun2socks
service_desc=$desc
prog=${script_path}/bin/badvpn-tun2socks
user=shadowsocks
pid_file=${script_path}/run/${desc}.pid
log_file=/dev/null
#log_file=${script_path}/run/${desc}.log
args=\
"--tundev $cfg_tun_dev "\
"--netif-ipaddr $cfg_tun_network_prefix.2 "\
"--netif-netmask 255.255.255.0 "\
"--socks-server-addr $cfg_socks_server_addr "\
"--logger stdout --loglevel info"

usage()
{
    printf "usage: $script_name [start|stop|restart|status]\n"
    exit 1
}

show_error()
{
    local message=$1
    printf "\033[;31m%s\033[0m\n" "$message"
}

show_success()
{
    local message=$1
    printf "\033[;32m%s\033[0m\n" "$message"
}

add_tun_dev()
{
    ip tuntap add dev $cfg_tun_dev mode tun user $user
    if [ $? -ne 0 ]
    then
        show_error "ip tuntap add failed"
        return
    fi

    ip addr change "${cfg_tun_network_prefix}.1/24" dev $cfg_tun_dev
    if [ $? -ne 0 ]
    then
        show_error "ip addr change failed"
        return
    fi

    ip link set $cfg_tun_dev up
    if [ $? -ne 0 ]
    then
        show_error "ip link set up failed"
        return
    fi

    ip route del default via "$cfg_gateway_ip"
    ip route add default via "$cfg_gateway_ip" metric 600
    for i in $cfg_bypass_ip_list
    do
        ip route add "$i" via "$cfg_gateway_ip" metric 5
    done
    ip route add default via "${cfg_tun_network_prefix}.2" metric 6
}

remove_tun_dev()
{
    ip route del default via "${cfg_tun_network_prefix}.2" metric 6 2>/dev/null
    for i in $cfg_bypass_ip_list
    do
        ip route del "$i" via "$cfg_gateway_ip" metric 5 2>/dev/null
    done

    ip link del $cfg_tun_dev 2>/dev/null
}

op_start()
{
    printf "[starting $service_desc]"
    start-stop-daemon -T -p $pid_file -c $user
    if [ $? -eq 0 ] 
    then
        show_error '[already started]'
    else
        remove_tun_dev
        add_tun_dev
        start-stop-daemon -Smb -p $pid_file -c $user -a /bin/bash -- \
                          -c "exec $prog $args >>$log_file 2>&1"
        if [ $? -eq 0 ] 
        then
            show_success '[success]'
        else
            show_error '[failed]'
        fi  
    fi
}

op_stop()
{
    printf "[stoping $service_desc]"
    start-stop-daemon -T -p $pid_file -c $user
    if [ $? -eq 0 ] 
    then
        start-stop-daemon -K -p $pid_file -c $user
        if [ $? -eq 0 ] 
        then
            show_success '[success]'
        else
            show_error '[failed]'
        fi
    else
        show_error '[not started]'
    fi

    remove_tun_dev
}

op_status()
{
    printf "[$service_desc status]"
    start-stop-daemon -T -p $pid_file -c $user
    if [ $? -eq 0 ]
    then
        show_success "[started]"
    else
        show_error "[stopped]"
    fi
}

if [ $# -ne 1 ]
then
    usage
fi

case "$1" in
    start)
        op_start
        ;;
    stop)
        op_stop
        ;;
    restart)
        op_stop
        op_start
        ;;
    status)
        op_status
        ;;
    *)
        usage
        ;;
esac

exit 0
